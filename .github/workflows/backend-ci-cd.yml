name: Backend CI

on:
  push:
    branches: [main, develop]
    paths:
      - "backend/**"
      - ".github/workflows/backend-ci-cd.yml"
  pull_request:
    branches: [main]
    paths:
      - "backend/**"
      - ".github/workflows/backend-ci-cd.yml"

jobs:
  experimental-backend-ci:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_DB: tododb_test
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        working-directory: backend
        run: pnpm install --no-frozen-lockfile

      - name: Create test database user
        run: |
          PGPASSWORD=testpass psql -h localhost -U testuser -d tododb_test -c "CREATE USER testappuser WITH PASSWORD 'testapppass';"
          PGPASSWORD=testpass psql -h localhost -U testuser -d tododb_test -c "GRANT ALL PRIVILEGES ON DATABASE tododb_test TO testappuser;"
          PGPASSWORD=testpass psql -h localhost -U testuser -d tododb_test -c "GRANT ALL ON SCHEMA public TO testappuser;"
          PGPASSWORD=testpass psql -h localhost -U testuser -d tododb_test -c "GRANT CREATE ON SCHEMA public TO testappuser;"

      - name: Build app for migrations
        working-directory: backend
        run: pnpm run build
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: tododb_test
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_APP_USER: testappuser
          POSTGRES_APP_PASSWORD: testapppass
          JWT_SECRET: test-secret

      - name: Run database migrations
        working-directory: backend
        run: pnpm run migration:run
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: tododb_test
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_APP_USER: testappuser
          POSTGRES_APP_PASSWORD: testapppass
          JWT_SECRET: test-secret

      - name: Run e2e tests
        working-directory: backend
        run: pnpm run test:e2e
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: tododb_test
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_APP_USER: testappuser
          POSTGRES_APP_PASSWORD: testapppass
          JWT_SECRET: test-secret

  redeploy-backend:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    steps:
      - name: Discord notification (start)
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          DISCORD_USERNAME: github_server
          DISCORD_AVATAR: https://picsum.photos/id/237/200/300
        uses: Ilshidur/action-discord@master
        with:
          args: "The project {{ EVENT_PAYLOAD.repository.full_name }} has started GitHub Action."

      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Login to dockerhub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ vars.BACKEND_IMAGE_NAME }}
          tags: |
            # set latest tag for default branch for manual trigger
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Invoke deployment hook
        uses: distributhor/workflow-webhook@v3
        with:
          webhook_url: https://fs-webhook.iecmu.com/hooks/redeploy
          webhook_secret: ${{ secrets.WEBHOOK_SECRET }}
          data: '{ "project_group": "${{ vars.PROJECT_GROUP}}", "discord_webhook": "${{ secrets.DISCORD_WEBHOOK}}", "webhook_secret": "${{ secrets.WEBHOOK_SECRET }}" }'

      - name: Discord notification (finish)
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          DISCORD_USERNAME: github_server
          DISCORD_AVATAR: https://picsum.photos/id/237/200/300
        uses: Ilshidur/action-discord@master
        with:
          args: "The project {{ EVENT_PAYLOAD.repository.full_name }} has finished GitHub Action."
